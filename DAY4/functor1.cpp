// functor1.cpp - 173

// C++ 초급에서는 "연산자 재정의" 가 많이 사용되지 않지만
// C++ 중급이상의 기술에서는 "연산자 재정의가 아주 중요해 집니다"
// 그래서 C++ 잘하려면 다양한 연산자 재정의 기술을 알아야 합니다.

class Plus
{
public:
	int operator()(int a, int b)
	{
		return a + b;
	}
};
int main()
{
	Plus p;				// p 는 Plus 라는 타입의 객체

	int n1 = p(1, 2);	// 객체를 함수 처럼 사용합니다
							// 함수 객체라고 생각합니다
	// 원리는 컴파일러가 아래 처럼 변경합니다.
	int n2 = p.operator()(1, 2);
	// v[0] => v.operator()(0) 와 유사한 원리
	// p(1,2) = p.operator() (1,2)
}

// function object (functor)
//		=> ( ) 연산자를 재정의 하여 함수처럼 사용 가능한 객체
//	
// 왜? 일반 함수를 만들지 함수 객체로 하나요?
//		=> 함수 객체가 일반 함수 보다 훨씬 좋습니다
//		=> C++20 이후 모든 표준 함수는 "함수" 가 아닙니다. 함수 객체입니다
// 